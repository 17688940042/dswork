using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;

using IBatisNet.DataMapper;
using IBatisNet.DataMapper.Configuration;
using IBatisNet.DataMapper.MappedStatements;
using IBatisNet.DataMapper.SessionStore;

namespace Tecamo.Core.Db
{
	class MySqlMapper
	{
		private ISqlMapper sqlSessionTemplate;
		private static String _appPath = null;
		private static string AppPath
		{
			get
			{
				if(_appPath == null)
				{
					//Environment.CurrentDirectory末尾无反斜杠,AppDomain.CurrentDomain.BaseDirectory末尾有反斜杠,判断相等需做处理
					string enviDir = Environment.CurrentDirectory;
					if(enviDir[enviDir.Length - 1] != '\\')
					{
						enviDir += '\\';
					}
					//Windows应用程序则相等 
					if(enviDir == AppDomain.CurrentDomain.BaseDirectory)
					{
						_appPath = AppDomain.CurrentDomain.BaseDirectory;
					}
					else
					{
						_appPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "bin");
					}
				}
				return _appPath;
			}
		}

		

		#region 构造函数

		/// <summary>
		/// 构造函数(默认为嵌入资源的SqlMap配置文件)
		/// </summary>
		protected MySqlMapper()
			: this("SqlMap.config")
		{
		}

		/// <summary>
		/// 构造函数(默认为外部的SqlSessionTemplate配置文件)
		/// </summary>
		/// <param name="SqlMapFile">数据库连接配置文件的地址</param>
		protected MySqlMapper(string SqlMapFile)
			: this(SqlMapFile, null)
		{
		}

		/// <summary>
		/// 构造函数
		/// </summary>
		/// <param name="sqlMapFile">数据库连接配置文件的地址(若是嵌入的资源,则为资源名称全路径)</param>
		/// <param name="invokerType">调用者类型,一般为配置文件所在程序集的类型,embedded=false,则为null</param>
		protected MySqlMapper(string sqlMapFile, Type invokerType)
		{
			if(invokerType != null)
			{
				Stream stream = Assembly.GetAssembly(invokerType).GetManifestResourceStream(invokerType, sqlMapFile);
			}
			else
			{
				string fullPath = Path.Combine(AppPath, sqlMapFile);
				sqlSessionTemplate = new DomSqlMapBuilder().Configure(fullPath);
			}
			//防止Web调用时抛出异常: WebSessionStore: Could not obtain reference to HttpContext
			CallContextSessionStore sessionStore = new CallContextSessionStore(sqlSessionTemplate.Id);
			sqlSessionTemplate.SessionStore = sessionStore;
		}

		/// <summary>
		/// 构造函数
		/// </summary>
		/// <param SqlMapper">ISqlMapper对象</param>
		protected MySqlMapper(ISqlMapper SqlMapper)
		{
			sqlSessionTemplate = SqlMapper;
		}

		#endregion 构造函数

		/// <summary>
		/// 获取ISqlMapper
		/// </summary>
		protected ISqlMapper SqlMapper
		{
			get
			{
				return sqlSessionTemplate;
			}
			set
			{
				sqlSessionTemplate = value;
			}
		}
	}
}
